package simplepaint;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

public class ButtonFrame extends javax.swing.JFrame {

    public ButtonFrame() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        
        setSize((int)width, (int)height);
        
        setVisible(true);
        
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        freehandButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        rectangleButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        ellipseButton = new javax.swing.JButton();
        polyButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jComboBox1 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        freehandButton.setText("Freehand");
        freehandButton.setFocusable(false);
        freehandButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        freehandButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(freehandButton);
        this.freehandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'f';
            }
        });

        lineButton.setText("Line");
        lineButton.setFocusable(false);
        lineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(lineButton);
        this.lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'l';
            }
        });

        squareButton.setText("Square");
        squareButton.setFocusable(false);
        squareButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        squareButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(squareButton);
        this.squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 's';
            }
        });

        rectangleButton.setText("Rectangle");
        rectangleButton.setFocusable(false);
        rectangleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(rectangleButton);
        this.rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'r';
            }
        });

        circleButton.setText("Circle");
        circleButton.setFocusable(false);
        circleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        circleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(circleButton);
        this.circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'c';
            }
        });

        ellipseButton.setText("Ellipse");
        ellipseButton.setFocusable(false);
        ellipseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ellipseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(ellipseButton);
        this.ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'o';
            }
        });

        polyButton.setText("Polygon");
        polyButton.setFocusable(false);
        polyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        polyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(polyButton);
        jToolBar1.add(jSeparator1);
        this.polyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'p';
            }
        });

        undoButton.setText("Undo");
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(undoButton);
        this.undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    p.undo();
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        redoButton.setText("Redo");
        redoButton.setFocusable(false);
        redoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(redoButton);
        this.redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    p.redo();
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        selectButton.setText("Select");
        selectButton.setFocusable(false);
        selectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(selectButton);
        jToolBar1.add(jSeparator2);
        this.selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.mode = 'q';
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Black", "Red", "Yellow", "Blue", "Green", "Magenta" }));
        jToolBar1.add(jComboBox1);
        this.jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (jComboBox1.getSelectedItem().equals("Black"))
                    p.setColor(Color.black);
                else if (jComboBox1.getSelectedItem().equals("Red"))
                    p.setColor(Color.red);
                else if (jComboBox1.getSelectedItem().equals("Yellow"))
                    p.setColor(Color.yellow);
                else if (jComboBox1.getSelectedItem().equals("Blue"))
                    p.setColor(Color.blue);
                else if (jComboBox1.getSelectedItem().equals("Green"))
                    p.setColor(Color.green);
                else if (jComboBox1.getSelectedItem().equals("Magenta"))
                    p.setColor(Color.magenta);
            }
        });
        jComboBox1.addKeyListener(p);
        
        buttonPanel.add(this.circleButton);
        buttonPanel.add(this.ellipseButton);
        buttonPanel.add(this.freehandButton);
        buttonPanel.add(this.lineButton);
        buttonPanel.add(this.polyButton);
        buttonPanel.add(this.rectangleButton);
        buttonPanel.add(this.squareButton);
        buttonPanel.add(this.selectButton);
        buttonPanel.add(this.undoButton);
        buttonPanel.add(this.redoButton);
        buttonPanel.add(this.jComboBox1);
        
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        
        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, 0));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    p.save();
                } catch (IOException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    p.load();
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Cut");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.cut();
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Copy");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p.copy();
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Paste");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    p.paste();
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(ButtonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);
        
        setLayout(new BorderLayout());
        
        add(buttonPanel, BorderLayout.SOUTH);
        
        this.addMouseListener(p);
        this.addMouseMotionListener(p);
        this.addKeyListener(p);
        this.add(p, BorderLayout.CENTER);
        
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private JPanel buttonPanel = new JPanel();
    private javax.swing.JButton lineButton;
    private javax.swing.JButton polyButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton ellipseButton;
    private javax.swing.JButton freehandButton;
    private ApplicationFrame p = new ApplicationFrame();
    
}
